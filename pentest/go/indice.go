package main

import (
	"encoding/json"
	"log"
	"net/http"
	"os"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
)

type Modulo struct {
	Modulo            string `json:Modulo`
	FechaModulo       string `json:FechaModulo`
	DescripcionModulo string `json:DescripcionModulo`
	ExamenModulo      string `json:DescripcionModulo`
}

type Contenido struct {
	Titulo string   `json:"Titulo"`
	Modulo []Modulo `json:Modulo`
}

var errorLogger = log.New(os.Stderr, "ERROR ", log.Llongfile)

func serverError(err error) (events.APIGatewayProxyResponse, error) {
	errorLogger.Println(err.Error())
	return events.APIGatewayProxyResponse{
		StatusCode: http.StatusInternalServerError,
		Body:       http.StatusText(http.StatusInternalServerError),
	}, nil
}

func clientError(status int) (events.APIGatewayProxyResponse, error) {
	return events.APIGatewayProxyResponse{
		StatusCode: status,
		Body:       http.StatusText(status),
	}, nil
}

func handler(req events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	log.Print("Log")
	moduloIntro := Modulo{
		Modulo:            "Introducci칩n y Bienvenida",
		FechaModulo:       "14/Sept/2018",
		DescripcionModulo: "Introducci칩n al curso y bienvenida",
		ExamenModulo:      "Pentest y an치lisis de vulnerabilidades",
	}

	modulos := []Modulo{moduloIntro}

	contenido := Contenido{
		Titulo: "Introducci칩n y Bienvenida",
		Modulo: modulos,
	}

	convertido, err := json.Marshal(contenido)
	if err != nil {
		log.Print(err)
	}
	return events.APIGatewayProxyResponse{
		StatusCode: 200,
		Headers:    map[string]string{"Headers": `[Content-Type:application/json]`},
		Body:       string(convertido),
	}, nil
}

func main() {
	lambda.Start(handler)
}
