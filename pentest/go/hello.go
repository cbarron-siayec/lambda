package main

import (
	"encoding/json"
	"log"
	"net/http"
	"os"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"
)

type Contenido struct {
	Titulo   string `json:"Titulo"`
	ParrafoA string `json:"ParrafoA"`
	ParrafoB string `json:ParrafoB`
	BulletA  string `json:BulletA`
	BulletB  string `json:BulletB`
}

var errorLogger = log.New(os.Stderr, "ERROR ", log.Llongfile)

func serverError(err error) (events.APIGatewayProxyResponse, error) {
	errorLogger.Println(err.Error())
	return events.APIGatewayProxyResponse{
		StatusCode: http.StatusInternalServerError,
		Body:       http.StatusText(http.StatusInternalServerError),
	}, nil
}

func clientError(status int) (events.APIGatewayProxyResponse, error) {
	return events.APIGatewayProxyResponse{
		StatusCode: status,
		Body:       http.StatusText(status),
	}, nil
}

func handler(req events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {
	log.Print("Log")
	test := Contenido{
		Titulo:   "Prueba",
		ParrafoA: "Parrafo A",
		BulletA:  "Bullet A",
	}
	convertido, err := json.Marshal(test)
	if err != nil {
		log.Print(err)
	}
	return events.APIGatewayProxyResponse{
		StatusCode: 200,
		Headers:    map[string]string{"Headers": `[Content-Type:application/json]`},
		Body:       string(convertido),
	}, nil
}

func main() {
	lambda.Start(handler)
}
